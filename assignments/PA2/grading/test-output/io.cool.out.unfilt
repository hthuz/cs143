#name "./io.cool"
(*
 *  The IO #1 CLASS
 is prede#1 FI
ned and has 4 methods:
 *
 *    out_str#1 IN
g(s : Str#1 IN
g) : SELF_TYPE
 *    out_#1 IN
t(i : Int) : SELF_TYPE
 *    #1 IN
_str#1 IN
g() : Str#1 IN
g
 *    #1 IN
_#1 IN
t() : Int
 *
 *    The out operations pr#1 IN
t their argument to the term#1 IN
al. The
 *    #1 IN
_str#1 IN
g method reads an entire l#1 IN
e from the term#1 IN
al and returns a
 *    str#1 IN
g not conta#1 IN
#1 IN
g the #1 NEW
 l#1 IN
e. The #1 IN
_#1 IN
t method also reads
 *    an entire l#1 IN
e from the term#1 IN
al and returns the #1 IN
teger
 *    correspond#1 IN
g to the #1 FI
rst non blank word on the l#1 IN
e. If that
 *    word is not an #1 IN
teger, it returns 0.
 *
 *
 *  Because our language is object oriented, we need an object #1 OF
 type
 *  IO #1 IN
 order to call any #1 OF
 these methods.
 *
 *  There are basically two ways #1 OF
 gett#1 IN
g access to IO #1 IN
 a #1 CLASS
 C.
 *
 *   1) De#1 FI
ne C to Inherit from IO. This way the IO methods become
 *      methods #1 OF
 C, and they can be called us#1 IN
g the abbreviated
 *      dispatch, i.e.
 *
 *      #1 CLASS
 C #1 INHERITS
 IO is
 *          ...
 *          out_str#1 IN
g("Hello world\n")
 *          ...
 *      end;
 *
 *   2) If your #1 CLASS
 C does not directly or #1 IN
directly #1 IN
herit from
 *      IO, the best way to access IO is through an #1 IN
itialized
 *      attribute #1 OF
 type IO. 
 *
 *      #1 CLASS
 C #1 INHERITS
 Foo is
 *         io : IO <- #1 NEW
 IO;
 *         ...
 *             io.out_str#1 IN
g("Hello world\n");
 *         ...
 *      end;
 *
 *  Approach 1) is most #1 OF
ten used, #1 IN
 particular when you need IO
 *  functions #1 IN
 the Ma#1 IN
 #1 CLASS
.
 *
 *)

#1 CLASS
 A {

   -- Let's assume that we don't want A to not #1 IN
herit from IO.

   io : IO <- #1 NEW
 IO;

   out_a() : Object { io.out_str#1 IN
g("A: Hello world\n") };

};

#1 CLASS
 B #1 INHERITS
 A {

   -- B does not have to an extra attribute, s#1 IN
ce it #1 INHERITS
 io from A.

   out_b() : Object { io.out_str#1 IN
g("B: Hello world\n") };

};

#1 CLASS
 C #1 INHERITS
 IO {

   -- Now the IO methods are part #1 OF
 C.

   out_c() : Object { out_str#1 IN
g("C: Hello world\n") };

   -- Note that out_str#1 IN
g(...) is just a shorthand for self.out_str#1 IN
g(...)

};

#1 CLASS
 D #1 INHERITS
 C {

   -- Inherits IO methods from C.

   out_d() : Object { out_str#1 IN
g("D: Hello world\n") };

};

#1 CLASS
 Ma#1 IN
 #1 INHERITS
 IO {

   -- Same #1 CASE
 as #1 CLASS
 C.

   ma#1 IN
() : Object {
      {
	 (#1 NEW
 A).out_a();
	 (#1 NEW
 B).out_b();
	 (#1 NEW
 C).out_c();
	 (#1 NEW
 D).out_d();
	 out_str#1 IN
g("Done.\n");
      }
   };

};
