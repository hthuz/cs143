CLASS
 Ma#1 IN
 #1 INHERITS
 IO {
    ma#1 IN
() : SELF_TYPE {
	(#1 LET
 c : Complex <- (#1 NEW
 Complex).#1 IN
it(1, 1) #1 IN

	    {
	        -- trivially equal (see CoolAid)
	        #1 IF
 c.reflect_X() = c.reflect_0()
	        #1 THEN
 out_str#1 IN
g("=)\n")
	        #1 ELSE
 out_str#1 IN
g("=(\n")
	        #1 FI
;
		-- equal
	        #1 IF
 c.reflect_X().reflect_Y().equal(c.reflect_0())
	        #1 THEN
 out_str#1 IN
g("=)\n")
	        #1 ELSE
 out_str#1 IN
g("=(\n")
	        #1 FI
;
	    }
	)
    };
};

CLASS
 Complex #1 INHERITS
 IO {
    x : Int;
    y : Int;

    #1 IN
it(a : Int, b : Int) : Complex {
	{
	    x = a;
	    y = b;
	    self;
	}
    };

    pr#1 IN
t() : Object {
	#1 IF
 y = 0
	#1 THEN
 out_#1 IN
t(x)
	#1 ELSE
 out_#1 IN
t(x).out_str#1 IN
g("+").out_#1 IN
t(y).out_str#1 IN
g("I")
	#1 FI

    };

    reflect_0() : Complex {
	{
	    x = ~x;
	    y = ~y;
	    self;
	}
    };

    reflect_X() : Complex {
	{
	    y = ~y;
	    self;
	}
    };

    reflect_Y() : Complex {
	{
	    x = ~x;
	    self;
	}
    };

    equal(d : Complex) : Bool {
	#1 IF
 x = d.x_value()
	#1 THEN

	    #1 IF
 y = d.y_value()
	    #1 THEN
 true
	    #1 ELSE
 false
	    #1 FI

	#1 ELSE
 false
	#1 FI

    };

    x_value() : Int {
	x
    };

    y_value() : Int {
	y
    };
};
